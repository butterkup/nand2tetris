// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/Inc16.hdl
/**
 * 16-bit incrementer:
 * out = in + 1
 */
CHIP Inc16 {
    IN in[16];
    OUT out[16];
   PARTS:
/*
    // Ripple increment circuit
    HalfAdder(a=in[0], b=true, sum=out[0], carry=c0);
    HalfAdder(a=in[1], b=c0, sum=out[1], carry=c1);
    HalfAdder(a=in[2], b=c1, sum=out[2], carry=c2);
    HalfAdder(a=in[3], b=c2, sum=out[3], carry=c3);
    HalfAdder(a=in[4], b=c3, sum=out[4], carry=c4);
    HalfAdder(a=in[5], b=c4, sum=out[5], carry=c5);
    HalfAdder(a=in[6], b=c5, sum=out[6], carry=c6);
    HalfAdder(a=in[7], b=c6, sum=out[7], carry=c7);
    HalfAdder(a=in[8], b=c7, sum=out[8], carry=c8);
    HalfAdder(a=in[9], b=c8, sum=out[9], carry=c9);
    HalfAdder(a=in[10], b=c9, sum=out[10], carry=c10);
    HalfAdder(a=in[11], b=c10, sum=out[11], carry=c11);
    HalfAdder(a=in[12], b=c11, sum=out[12], carry=c12);
    HalfAdder(a=in[13], b=c12, sum=out[13], carry=c13);
    HalfAdder(a=in[14], b=c13, sum=out[14], carry=c14);
    HalfAdder(a=in[15], b=c14, sum=out[15], carry=c15);
*/

    // Carry ahead increment circuit
    HalfAdder(a=in[0], b=true, sum=out[0], carry=c0);
    HalfAdder(a=in[1], b=c0, sum=out[1], carry=c1);
    HalfAdder(a=in[2], b=c1, sum=out[2], carry=c2);
    HalfAdder(a=in[3], b=c2, sum=out[3], carry=c3);
    HalfAdder(a=in[4], b=c3, sum=out[4], carry=c4);
    HalfAdder(a=in[5], b=c4, sum=out[5], carry=c5);
    HalfAdder(a=in[6], b=c5, sum=out[6], carry=c6);
    HalfAdder(a=in[7], b=c6, sum=out[7], carry=c7);
    
    // If the carry (c7) is a 1 (true)
    // Prediction: c7 is a 1
    HalfAdder(a=in[8], b=true, sum=out11, carry=c18);
    HalfAdder(a=in[9], b=c18, sum=out12, carry=c19);
    HalfAdder(a=in[10], b=c19, sum=out13, carry=c110);
    HalfAdder(a=in[11], b=c110, sum=out14, carry=c111);
    HalfAdder(a=in[12], b=c111, sum=out15, carry=c112);
    HalfAdder(a=in[13], b=c112, sum=out16, carry=c113);
    HalfAdder(a=in[14], b=c113, sum=out17, carry=c114);
    HalfAdder(a=in[15], b=c114, sum=out18, carry=c115); 

    // If the carry (c7) is a 0 (false), then
    // the bits range [8,15] are equal to the input
    Mux(a=in[8], b=out11, sel=c7, out=out[8]);
    Mux(a=in[9], b=out12, sel=c7, out=out[9]);
    Mux(a=in[10], b=out13, sel=c7, out=out[10]);
    Mux(a=in[11], b=out14, sel=c7, out=out[11]);
    Mux(a=in[12], b=out15, sel=c7, out=out[12]);
    Mux(a=in[13], b=out16, sel=c7, out=out[13]);
    Mux(a=in[14], b=out17, sel=c7, out=out[14]);
    Mux(a=in[15], b=out18, sel=c7, out=out[15]);
}
