// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/Add16.hdl
/**
 * 16-bit adder: Adds two 16-bit two's complement values.
 * The most significant carry bit is ignored.
 */
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
/*
    // Ripple Adder Architecture
    HalfAdder(a=a[0], b=b[0], sum=out[0], carry=ab0);
    FullAdder(a=a[1], b=b[1], c=ab0, sum=out[1], carry=ab1);
    FullAdder(a=a[2], b=b[2], c=ab1, sum=out[2], carry=ab2);
    FullAdder(a=a[3], b=b[3], c=ab2, sum=out[3], carry=ab3);
    FullAdder(a=a[4], b=b[4], c=ab3, sum=out[4], carry=ab4);
    FullAdder(a=a[5], b=b[5], c=ab4, sum=out[5], carry=ab5);
    FullAdder(a=a[6], b=b[6], c=ab5, sum=out[6], carry=ab6);
    FullAdder(a=a[7], b=b[7], c=ab6, sum=out[7], carry=ab7);
    FullAdder(a=a[8], b=b[8], c=ab7, sum=out[8], carry=ab8);
    FullAdder(a=a[9], b=b[9], c=ab8, sum=out[9], carry=ab9);
    FullAdder(a=a[10], b=b[10], c=ab9, sum=out[10], carry=ab10);
    FullAdder(a=a[11], b=b[11], c=ab10, sum=out[11], carry=ab11);
    FullAdder(a=a[12], b=b[12], c=ab11, sum=out[12], carry=ab12);
    FullAdder(a=a[13], b=b[13], c=ab12, sum=out[13], carry=ab13);
    FullAdder(a=a[14], b=b[14], c=ab13, sum=out[14], carry=ab14);
    FullAdder(a=a[15], b=b[15], c=ab14, sum=out[15], carry=ab15);
*/
    // Cost of computing carry ahead circuit will be 3t*8+3t = 27t
    HalfAdder(a=a[0], b=b[0], sum=out[0], carry=c0);
    FullAdder(a=a[1], b=b[1], c=c0, sum=out[1], carry=c1);
    FullAdder(a=a[2], b=b[2], c=c1, sum=out[2], carry=c2);
    FullAdder(a=a[3], b=b[3], c=c2, sum=out[3], carry=c3);
    FullAdder(a=a[4], b=b[4], c=c3, sum=out[4], carry=c4);
    FullAdder(a=a[5], b=b[5], c=c4, sum=out[5], carry=c5);
    FullAdder(a=a[6], b=b[6], c=c5, sum=out[6], carry=c6);
    FullAdder(a=a[7], b=b[7], c=c6, sum=out[7], carry=c7);
    
    // If the carry (c7) is a 0 (false)
    // Prediction: c7 is a 0
    HalfAdder(a=a[8], b=b[8], sum=out01, carry=c08);
    FullAdder(a=a[9],  b=b[9], c=c08, sum=out02, carry=c09);
    FullAdder(a=a[10], b=b[10], c=c09, sum=out03, carry=c010);
    FullAdder(a=a[11], b=b[11], c=c010, sum=out04, carry=c011);
    FullAdder(a=a[12], b=b[12], c=c011, sum=out05, carry=c012);
    FullAdder(a=a[13], b=b[13], c=c012, sum=out06, carry=c013);
    FullAdder(a=a[14], b=b[14], c=c013, sum=out07, carry=c014);
    FullAdder(a=a[15], b=b[15], c=c014, sum=out08, carry=c015);

    // If the carry (c7) is a 1 (true)
    // Prediction: c7 is a 1
    FullAdder(a=a[8], b=b[8], c=true, sum=out11, carry=c18);
    FullAdder(a=a[9],  b=b[9], c=c18, sum=out12, carry=c19);
    FullAdder(a=a[10], b=b[10], c=c19, sum=out13, carry=c110);
    FullAdder(a=a[11], b=b[11], c=c110, sum=out14, carry=c111);
    FullAdder(a=a[12], b=b[12], c=c111, sum=out15, carry=c112);
    FullAdder(a=a[13], b=b[13], c=c112, sum=out16, carry=c113);
    FullAdder(a=a[14], b=b[14], c=c113, sum=out17, carry=c114);
    FullAdder(a=a[15], b=b[15], c=c114, sum=out18, carry=c115); 

    // Select between the two sets of 8bit predictions
    Mux(a=out01, b=out11, sel=c7, out=out[8]);
    Mux(a=out02, b=out12, sel=c7, out=out[9]);
    Mux(a=out03, b=out13, sel=c7, out=out[10]);
    Mux(a=out04, b=out14, sel=c7, out=out[11]);
    Mux(a=out05, b=out15, sel=c7, out=out[12]);
    Mux(a=out06, b=out16, sel=c7, out=out[13]);
    Mux(a=out07, b=out17, sel=c7, out=out[14]);
    Mux(a=out08, b=out18, sel=c7, out=out[15]);
}
