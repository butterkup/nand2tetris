// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    Or(a=Ainstruction, b=instruction[5], out=writeA);
    And(a=instruction[4], b=instruction[15], out=writeD);
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    ARegister(in=inA, load=writeA, out=A, out[0..14]=addressM);
    DRegister(in=outALU, load=writeD, out=D);

    Mux16(a=A, b=inM, sel=instruction[12], out=AM);
    ALU(x=D, y=AM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU, out=outM,
        zr=zr, ng=ng
    );

    DMux4Way(in=true, sel[0]=zr, sel[1]=ng, a=gt, b=eq, c=lt);
    Or(a=eq, b=gt, out=ge);
    Or(a=eq, b=lt, out=le);
    Not(in=eq, out=ne);

    Mux(a=false, b=gt, sel=instruction[0], out=l210);
    Mux(a=eq, b=ge, sel=instruction[0], out=l211);
    Mux(a=lt, b=ne, sel=instruction[0], out=l212);
    Mux(a=le, b=true, sel=instruction[0], out=l213);

    Mux(a=l210, b=l211, sel=instruction[1], out=l20);
    Mux(a=l212, b=l213, sel=instruction[1], out=l21);

    Mux(a=l20, b=l21, sel=instruction[2], out=l0);

    And(a=instruction[15], b=l0, out=shouldJump);

    PC(in=A, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}